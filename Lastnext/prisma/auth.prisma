generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                 String   @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application Models
model User {
  id            String     @id @default(uuid())
  username      String     @unique
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  name          String?
  image         String?
  profile_image String?
  positions     String     @default("User")
  created_at    DateTime   @default(now())
  accessToken   String?
  refreshToken  String?
  sessionToken  String?
  
  // NextAuth Relations
  accounts       Account[]
  sessions       Session[]
  
  // Application Relations
  userProperties UserProperty[]
  
  @@map("users")
}

model Property {
  id            String     @id @default(uuid())
  name          String
  description   String?
  created_at    DateTime   @default(now())
  
  userProperties UserProperty[]
  
  @@map("properties")
}

model UserProperty {
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@id([userId, propertyId])
  @@map("user_properties")
}