generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  username      String     @unique
  email         String?    @unique
  profile_image String?
  positions     String     @default("User")
  created_at    DateTime   @default(now())
  accessToken   String?
  refreshToken  String?
  sessionToken  String?
  
  // Relations
  accounts       Account[]
  sessions       Session[]
  userProperties UserProperty[] // Explicit many-to-many through join table
  
  @@map("users") // Optional: maps to snake_case table name
}

model Property {
  id            String     @id @default(uuid())
  name          String
  description   String?
  created_at    DateTime   @default(now())
  
  // Relations
  userProperties UserProperty[]
  
  @@map("properties") // Optional: maps to snake_case table name
}

model UserProperty {
  userId     String
  propertyId String
  createdAt  DateTime @default(now()) // Optional: track when relationship was created
  
  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@id([userId, propertyId])
  @@map("user_properties") // Optional: maps to snake_case table name
}

model Account {
  id                 String   @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  
  // Relations
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts") // Optional: maps to snake_case table name
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions") // Optional: maps to snake_case table name
}